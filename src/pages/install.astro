---
import Page from "@layouts/Page.astro";
import { optionalDependencies } from "src/generator";
---
<Page title="Installation">
    <div id="container">
        <div id="left">
            <form>
                <p>Build Script</p>
                <div>
                    <input type="radio" name="dsl" value="kotlin" checked>
                    <label for="kotlin">Gradle (Kotlin)</label>
                </div>
                <div>
                    <input type="radio" name="dsl" value="groovy">
                    <label for="groovy">Gradle (Groovy)</label>
                </div>
                <div>
                    <input type="radio" name="dsl" value="maven">
                    <label for="maven">Maven</label>
                </div>

                <p>Language</p>
                <div>
                    <input type="radio" name="language" value="java" checked>
                    <label for="java">Java</label>
                </div>
                <div>
                    <input type="radio" name="language" value="kotlin">
                    <label for="kotlin">Kotlin</label>
                </div>

                <p>Group</p>
                <input type="text" name="group" value="com.example">

                <p>Version</p>
                <input type="text" name="version" value="0.1.0">

                <p>Main Class</p>
                <input type="text" name="mainClass" value="com.example.Server">

                <p>Dependencies</p>
                {Object.entries(optionalDependencies).map(([key, dependency]) => (
                    <div>
                        <input type="checkbox" name="dependencies" value={key} id={key}>
                        <label for={key}>{dependency.name}</label>
                    </div>
                ))}

                <p>Logger</p>
                <div>
                    <input type="radio" name="logger" value="none" checked>
                    <label for="none">None</label>
                </div>
                <div>
                    <input type="radio" name="logger" value="tinylog">
                    <label for="tinylog">TinyLog</label>
                </div>
                <div>
                    <input type="radio" name="logger" value="logback">
                    <label for="logback">Logback</label>
                </div>
                <div>
                    <input type="radio" name="logger" value="simple">
                    <label for="simple">Simple</label>
                </div>
            </form>
        </div>
        <div id="right">
            <div id="button-container">
                <button id="copy">Copy</button>
                <button id="save">Save</button>
            </div>
            <pre id="code"></pre>
        </div>
    </div>
</Page>

<style>
    #container {
        display: flex;
        justify-content: space-between;
    }

    #right {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    #button-container {
        display: flex;
        width: 100%;
        gap: 8px;
    }

    #copy, #save {
        flex: 1;
        padding: 8px;
    }

    #code {
        background: rgb(13, 17, 22);
        color: rgb(230, 237, 243);
        font-size: 14px;
        border-radius: 4px;
        padding: 16px;
        width: 600px;
        white-space: pre;
        overflow-x: auto;
    }

    input[type="text"] {
        font-size: 16px;
    }

    p {
        font-weight: bold;
        margin-top: 16px;
    }

    p:first-child {
        margin-top: 0;
    }

    input[type="radio"], input[type="checkbox"] {
        transform: scale(1.2);
        margin-right: 8px;
    }
</style>

<script>
    import {
        type Configuration,
        generateKotlinCode,
        generateGroovyCode,
        generateMavenCode,
        optionalDependencies,
        minestom,
        fetchLatestRelease
    } from "../generator";

    function generateCode(configuration: Configuration): string {
        if (configuration.dsl == "groovy") return generateGroovyCode(configuration, resolvedVersions);
        if (configuration.dsl == "maven") return generateMavenCode(configuration, resolvedVersions);
        return generateKotlinCode(configuration, resolvedVersions);
    }

    const codeElement = document.querySelector("#code") as HTMLPreElement;
    let resolvedVersions: Record<string, string> = {};

    async function fetchVersions() {
        try {
            const kotlinTagName = await fetchLatestRelease("JetBrains", "kotlin");
            resolvedVersions["kotlin"] = kotlinTagName.startsWith("v") ? kotlinTagName.substring(1) : kotlinTagName;
        } catch (error) {
            console.warn(`Failed to fetch version for kotlin:`, error);
        }

        if (typeof minestom.version === "function") {
            try {
                resolvedVersions[minestom.artifact] = await minestom.version();
            } catch (error) {
                console.warn(`Failed to fetch version for ${minestom.artifact}:`, error);
                resolvedVersions[minestom.artifact] = "latest";
            }
        }

        for (const [_, dependency] of Object.entries(optionalDependencies)) {
            if (typeof dependency.version === "function") {
                try {
                    resolvedVersions[dependency.artifact] = await dependency.version();
                } catch (error) {
                    console.warn(`Failed to fetch version for ${dependency.artifact}:`, error);
                    resolvedVersions[dependency.artifact] = "latest";
                }
            }
        }
    }

    function updateCode() {
        const form = document.querySelector("form") as HTMLFormElement;
        const dslElement = form.querySelector(`input[name="dsl"]:checked`) as HTMLInputElement;
        const languageElement = form.querySelector(`input[name="language"]:checked`) as HTMLInputElement;
        const groupElement = form.querySelector(`input[name="group"]`) as HTMLInputElement;
        const versionElement = form.querySelector(`input[name="version"]`) as HTMLInputElement;
        const mainClassElement = form.querySelector(`input[name="mainClass"]`) as HTMLInputElement;
        const dependencyElements = form.querySelectorAll(`input[name="dependencies"]:checked`) as NodeListOf<HTMLInputElement>;
        const loggerElement = form.querySelector(`input[name="logger"]:checked`) as HTMLInputElement;

        codeElement.innerText = generateCode({
            dsl: dslElement.value as "kotlin" | "groovy" | "maven",
            language: languageElement.value as "java" | "kotlin",
            group: groupElement.value,
            version: versionElement.value,
            mainClass: mainClassElement.value,
            dependencies: Array.from(dependencyElements).map(element => element.value),
            logger: loggerElement.value as "none" | "tinylog" | "logback" | "simple"
        });
    }

    document.querySelector("#copy")?.addEventListener("click", () => navigator.clipboard.writeText(codeElement.innerText));

    document.querySelector("#save")?.addEventListener("click", async () => {
        const content = codeElement.innerText;
        const form = document.querySelector("form") as HTMLFormElement;
        const dslElement = form.querySelector(`input[name="dsl"]:checked`) as HTMLInputElement;

        let filename: string;
        let fileTypes: any[];

        if (dslElement.value === "maven") {
            filename = "pom.xml";
            fileTypes = [{
                description: "Maven files",
                accept: {"application/xml": [".xml"]},
            }];
        } else if (dslElement.value === "groovy") {
            filename = "build.gradle";
            fileTypes = [{
                description: "Gradle files",
                accept: {"text/plain": [".gradle"]},
            }];
        } else {
            filename = "build.gradle.kts";
            fileTypes = [{
                description: "Gradle files",
                accept: {"text/plain": [".gradle.kts"]},
            }];
        }

        if ("showSaveFilePicker" in window) {
            try {
                const fileHandle = await window.showSaveFilePicker({
                    suggestedName: filename,
                    types: fileTypes,
                });

                const writable = await fileHandle.createWritable();
                await writable.write(content);
                await writable.close();
            } catch (err) {
                if (err.name !== "AbortError") {
                    console.error("Save failed:", err);
                }
            }
        } else {
            const blob = new Blob([content], { type: "text/plain" });
            const url = URL.createObjectURL(blob);
            const linkElement = document.createElement("a");
            linkElement.href = url;
            linkElement.download = filename;
            linkElement.click();
            URL.revokeObjectURL(url);
        }
    });
    document.querySelector("form")?.addEventListener("change", updateCode);
    document.querySelector("form")?.addEventListener("input", updateCode);
    fetchVersions().then(() => updateCode());
</script>
